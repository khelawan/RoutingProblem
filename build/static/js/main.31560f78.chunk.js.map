{"version":3,"sources":["logo.svg","App.js","api.service.ts","customLogic.directive.ts","confDetails.js","tile.js","confrence.js","route.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Component","ApiService","Object","classCallCheck","this","getDataFromApi","url","_confId","ajax","pipe","map","res","response","free","filter","_da","conference_id","CustomLogic","slice","_data","val","length","substr","removeExtra","_char","replace","RegExp","filterConferences","_key","cd","confName","toLowerCase","indexOf","_apiService","_customizelogic","ConferenceDetails","_Component","props","_this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","match","params","id","subscribe","setState","_conferenceData","isLoading","state","inherits","createClass","key","value","react_default","a","createElement","react_router_dom","to","className","entryType","city","country","confStartDate","src","imageURL","style","styles","imgStyle","alt","width","_customLogic","Tile","apply","arguments","_style","gridContainer","gridItem","card","image","name","title","date","boxShadow","margin","textAlign","fontFamily","color","fontSize","height","display","gridGap","padding","backgroundColor","gridColumn","gridRow","Conference","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","_conference","_orginalData","stop","_ref2","_callee2","_keyText","_filteredData","_context2","sent","_x","_this2","_conferenceNumber","type","placeholder","onChange","text","target","index","tile","Routes","basename","react_router","path","exact","render","confrence","confDetails","Boolean","window","location","hostname","Root","route","React","ReactDOM","src_Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31560f78.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nexport class App extends Component{\n  render(){\n  return (\n    <this.props.children />\n  );\n  }\n}\n\nexport default App;\n","import { Observable } from 'rxjs';\nimport { ajax } from 'rxjs/ajax';\nimport { map  } from 'rxjs/operators';\n\nexport class ApiService  {\n  getDataFromApi = (url: any, _confId: number): Observable<any> => {\n    return ajax(url).pipe(\n      map(res => {\n        return _confId ? res.response.free.filter(\n          (_da:any) => _da.conference_id == _confId\n        ) : res.response.free;\n      })\n    )\n  }\n};\n\nexport default ApiService;","export class CustomLogic {\n    slice = (_data: string, val: number): string => {return _data.length > val ? _data.substr(0, val - 3) + \"...\"  : _data };\n    removeExtra = (_data: string, _char: string): string => { return _data.replace(new RegExp(_char, \"g\"), \"\"); };\n    filterConferences = (_key: string, _data: any) => {return _data.filter( ((cd: any) => cd.confName.toLowerCase().indexOf(_key.toLowerCase()) > -1))};\n}\nexport default CustomLogic;","import React, { Component } from 'react';\nimport {Link} from 'react-router-dom';\nimport { ApiService } from './api.service.ts';\nimport { CustomLogic } from \"./customLogic.directive.ts\";\nconst _apiService = new ApiService(); \nlet _customizelogic = new CustomLogic();\nexport class ConferenceDetails extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            _conferenceData:[],\n            isLoading: true\n        }\n    }\n    componentDidMount = () => {\n        _apiService.getDataFromApi(\n            \"https://o136z8hk40.execute-api.us-east-1.amazonaws.com/dev/get-list-of-conferences\",\n             this.props.match.params.id\n        ).subscribe(\n            res => {\n                this.setState({\n                    _conferenceData: res,\n                    isLoading: false\n                })\n            }\n        )\n    }\n    render(){\n        if(this.state.isLoading){\n            return(\n                <center><h2>Loading...</h2></center>\n            )\n        }\n        if(!this.state._conferenceData.length){\n            return(\n                <center><h2>Opps Conference Not Found</h2></center>\n            )\n        }\n        return(\n            <div>\n                <Link to=\"/conf\"><h2>Conferences</h2></Link>\n                <div className=\"container\">\n                    <div className=\"row\">\n                    <table className=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th>Key</th>\n                            <th>Value</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td>ID</td>\n                            <td>{this.state._conferenceData[0].conference_id}</td>\n                        </tr>\n                        <tr>\n                            <td>Name</td>\n                            <td>{this.state._conferenceData[0].confName}</td>\n                        </tr>\n                        <tr>\n                            <td>Entry</td>\n                            <td>{this.state._conferenceData[0].entryType}</td>\n                        </tr>\n                        <tr>\n                            <td>Location</td>\n                            <td>{this.state._conferenceData[0].city}, {this.state._conferenceData[0].country}</td>\n                        </tr>\n                        <tr>\n                            <td>Date</td>\n                            <td>{this.state._conferenceData[0].confStartDate}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                    </div>\n                    <img src={_customizelogic.removeExtra(this.state._conferenceData[0].imageURL,'\"')}\n                        style={styles.imgStyle}\n                        alt={this.state._conferenceData[0].confName} />\n                </div>\n            </div>\n        );\n    }\n} ;\n\nconst styles = {\n    imgStyle:{\n        width:\"500px\"\n    }\n}\n\nexport default ConferenceDetails;","import React, { Component } from 'react';\nimport { CustomLogic } from \"./customLogic.directive.ts\";\nimport { Link } from \"react-router-dom\";\nconst _customLogic = new CustomLogic(); \nexport class Tile extends Component { \n  render(){\n    return(\n      <div className=\"col-md-4\" style={_style.gridContainer} >\n        <Link to={\"/details/\"+this.props._key}>\n          <div style={_style.gridItem}>\n            <div style={_style.card}>\n              <img src={_customLogic.removeExtra(this.props.image, '\"')}  style={_style.width} alt={this.props.name}/>\n              <h1>{_customLogic.slice(this.props.name , 20)}</h1>\n              <p style={_style.title}>{this.props.city}</p>\n              <p>{this.props.date}</p>\n              <div>\n              </div>\n            </div>\n          </div>\n        </Link>\n      </div>\n    );\n  }\n}\n const _style = {\n    card: {\n    boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2)\",\n    margin: \"auto\",\n    textAlign: \"center\",\n    fontFamily: \"arial\",\n  },\n  title: {\n    color: \"grey\",\n    fontSize: \"16px\",\n  },\n  width:{\n    width:\"100%\",\n    height: 300\n  },\n  gridContainer: {\n    display: 'grid',\n    gridGap: '10px',\n    padding: '10px'\n  },gridItem: {\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\n    textAlign: 'center',\n    padding: '20px',\n    gridColumn: \"1 / span 3\",\n    gridRow: 3\n  }\n  }\n  \nexport default Tile;","import React, { Component} from 'react';\nimport './App.css';\nimport ApiService from './api.service.ts';\nimport Tile from './tile.js';\nimport { CustomLogic } from \"./customLogic.directive.ts\";\nimport 'bootstrap/dist/css/bootstrap.css';\nclass Conference extends Component {\n  constructor(props){ \n    super(props)\n    this.state = {\n      _conference: []\n    }\n  }\n  componentDidMount = async () => {\n    let _api = new ApiService();\n    _api.getDataFromApi(\"https://o136z8hk40.execute-api.us-east-1.amazonaws.com/dev/get-list-of-conferences\", 0)\n      .subscribe(res => {\n        if(res) {\n          this.setState({\n            _conference: res,\n            _orginalData: res\n          })\n        }\n      });\n\n  }\n\n  filterConferences = async (_keyText) => {\n    const _customLogic = new CustomLogic();\n    let _filteredData = await _customLogic.filterConferences(_keyText, this.state._orginalData)\n    this.setState({\n      _conference: _filteredData\n    })\n  }\n\n  render(){\n    let _conferenceNumber = this.state._conference;\n    if(!_conferenceNumber.length){\n      return(\n        <div className=\"container\">\n          <br />\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <input type=\"text\" placeholder=\"search...\" onChange ={((text) => {this.filterConferences(text.target.value)})} />\n              <label>({this.state._conference.length})</label>\n            </div>\n          </div>\n          <center><h2>Loading...</h2></center>\n        </div>\n      )\n    }\n    return(\n      <div className=\"container\">\n        <br />\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <input type=\"text\" placeholder=\"search...\" onChange ={((text) => {this.filterConferences(text.target.value)})} />\n            <label>({this.state._conference.length})</label>\n          </div>\n        </div>\n        <div className=\"row\">\n          {\n            _conferenceNumber.map((val,index) => {\n              return(\n                <Tile name={val.confName} image={val.imageURL} date={val.confStartDate} city={val.city} _key={val.conference_id} key={val.conference_id}> </Tile>\n              )\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Conference;\n\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport App from \"./App\";\nimport ConferenceDetails from \"./confDetails\";\nimport Conference from \"./confrence\";\n\nexport class Routes extends Component {\n  render() {\n    return (\n      <Router basename={\"/build\"}>\n        <div>\n          <Route path=\"/\" exact render={props => <Conference {...props} />}>\n            <Route path=\"/\" exact render={props => <Conference {...props} />} />\n            <Route path=\"/conf/\" render={props => <Conference {...props} />} />\n            <Route\n              path=\"/details/:id\"\n              render={props => <ConferenceDetails {...props} />}\n            />\n          </Route>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './route'\nimport * as serviceWorker from './serviceWorker';\n\nclass Root extends React.Component {\n    render(){\n        return (\n            <Routes />\n        )\n    }\n}\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}